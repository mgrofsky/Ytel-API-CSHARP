/*
 * YtelAPI.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using YtelAPI.Standard;
using YtelAPI.Standard.Utilities;
using YtelAPI.Standard.Http.Request;
using YtelAPI.Standard.Http.Response;
using YtelAPI.Standard.Http.Client;
using YtelAPI.Standard.Exceptions;

namespace YtelAPI.Standard.Controllers
{
    public partial class CallController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static CallController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static CallController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new CallController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Retrieve a single voice call’s information by its CallSid.
        /// </summary>
        /// <param name="callSid">Required parameter: The unique identifier for the voice call.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateCallsViewcalldetail(string callSid)
        {
            Task<string> t = CreateCallsViewcalldetailAsync(callSid);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieve a single voice call’s information by its CallSid.
        /// </summary>
        /// <param name="callSid">Required parameter: The unique identifier for the voice call.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateCallsViewcalldetailAsync(string callSid)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/calls/viewcalldetail.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "callSid", callSid )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Retrieve a single voice call’s information by its CallSid.
        /// </summary>
        /// <param name="callsid">Required parameter: The unique identifier for the voice call.</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateCallsViewcalls(string callsid)
        {
            Task<string> t = CreateCallsViewcallsAsync(callsid);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieve a single voice call’s information by its CallSid.
        /// </summary>
        /// <param name="callsid">Required parameter: The unique identifier for the voice call.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateCallsViewcallsAsync(string callsid)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/calls/viewcalls.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "callsid", callsid )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Play Dtmf and send the Digit
        /// </summary>
        /// <param name="Models.CreateCallsSenddigitsInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateCallsSenddigits(Models.CreateCallsSenddigitsInput input)
        {
            Task<string> t = CreateCallsSenddigitsAsync(input);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Play Dtmf and send the Digit
        /// </summary>
        /// <param name="Models.CreateCallsSenddigitsInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateCallsSenddigitsAsync(Models.CreateCallsSenddigitsInput input)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/calls/senddigits.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "CallSid", input.CallSid ),
                new KeyValuePair<string, object>( "PlayDtmf", input.PlayDtmf ),
                new KeyValuePair<string, object>( "PlayDtmfDirection", (input.PlayDtmfDirection.HasValue) ? Models.PlayDtmfDirectionEnumHelper.ToValue(input.PlayDtmfDirection.Value) : null )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Initiate an outbound Ringless Voicemail through Ytel.
        /// </summary>
        /// <param name="Models.CreateCallsMakervmInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateCallsMakervm(Models.CreateCallsMakervmInput input)
        {
            Task<string> t = CreateCallsMakervmAsync(input);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Initiate an outbound Ringless Voicemail through Ytel.
        /// </summary>
        /// <param name="Models.CreateCallsMakervmInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateCallsMakervmAsync(Models.CreateCallsMakervmInput input)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/calls/makervm.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "From", input.From ),
                new KeyValuePair<string, object>( "RVMCallerId", input.RVMCallerId ),
                new KeyValuePair<string, object>( "To", input.To ),
                new KeyValuePair<string, object>( "VoiceMailURL", input.VoiceMailURL ),
                new KeyValuePair<string, object>( "Method", input.Method ),
                new KeyValuePair<string, object>( "StatusCallBackUrl", input.StatusCallBackUrl ),
                new KeyValuePair<string, object>( "StatsCallBackMethod", input.StatsCallBackMethod )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// A list of calls associated with your Ytel account
        /// </summary>
        /// <param name="Models.CreateCallsListcallsInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateCallsListcalls(Models.CreateCallsListcallsInput input)
        {
            Task<string> t = CreateCallsListcallsAsync(input);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// A list of calls associated with your Ytel account
        /// </summary>
        /// <param name="Models.CreateCallsListcallsInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateCallsListcallsAsync(Models.CreateCallsListcallsInput input)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/calls/listcalls.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "Page", input.Page ),
                new KeyValuePair<string, object>( "PageSize", input.PageSize ),
                new KeyValuePair<string, object>( "To", input.To ),
                new KeyValuePair<string, object>( "From", input.From ),
                new KeyValuePair<string, object>( "DateCreated", input.DateCreated )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Interrupt the Call by Call Sid
        /// </summary>
        /// <param name="Models.CreateCallsInterruptcallsInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateCallsInterruptcalls(Models.CreateCallsInterruptcallsInput input)
        {
            Task<string> t = CreateCallsInterruptcallsAsync(input);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Interrupt the Call by Call Sid
        /// </summary>
        /// <param name="Models.CreateCallsInterruptcallsInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateCallsInterruptcallsAsync(Models.CreateCallsInterruptcallsInput input)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/calls/interruptcalls.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "CallSid", input.CallSid ),
                new KeyValuePair<string, object>( "Url", input.Url ),
                new KeyValuePair<string, object>( "Method", input.Method ),
                new KeyValuePair<string, object>( "Status", (input.Status.HasValue) ? Models.Status24EnumHelper.ToValue(input.Status.Value) : null )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Start or stop recording of an in-progress voice call.
        /// </summary>
        /// <param name="Models.CreateCallsRecordcallsInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateCallsRecordcalls(Models.CreateCallsRecordcallsInput input)
        {
            Task<string> t = CreateCallsRecordcallsAsync(input);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Start or stop recording of an in-progress voice call.
        /// </summary>
        /// <param name="Models.CreateCallsRecordcallsInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateCallsRecordcallsAsync(Models.CreateCallsRecordcallsInput input)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/calls/recordcalls.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "CallSid", input.CallSid ),
                new KeyValuePair<string, object>( "Record", input.Record ),
                new KeyValuePair<string, object>( "Direction", (input.Direction.HasValue) ? Models.DirectionEnumHelper.ToValue(input.Direction.Value) : null ),
                new KeyValuePair<string, object>( "TimeLimit", input.TimeLimit ),
                new KeyValuePair<string, object>( "CallBackUrl", input.CallBackUrl ),
                new KeyValuePair<string, object>( "Fileformat", (input.Fileformat.HasValue) ? Models.FileformatEnumHelper.ToValue(input.Fileformat.Value) : null )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Play Audio from a url
        /// </summary>
        /// <param name="Models.CreateCallsPlayaudiosInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateCallsPlayaudios(Models.CreateCallsPlayaudiosInput input)
        {
            Task<string> t = CreateCallsPlayaudiosAsync(input);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Play Audio from a url
        /// </summary>
        /// <param name="Models.CreateCallsPlayaudiosInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateCallsPlayaudiosAsync(Models.CreateCallsPlayaudiosInput input)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/calls/playaudios.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "CallSid", input.CallSid ),
                new KeyValuePair<string, object>( "AudioUrl", input.AudioUrl ),
                new KeyValuePair<string, object>( "SayText", input.SayText ),
                new KeyValuePair<string, object>( "Length", input.Length ),
                new KeyValuePair<string, object>( "Direction", (input.Direction.HasValue) ? Models.DirectionEnumHelper.ToValue(input.Direction.Value) : null ),
                new KeyValuePair<string, object>( "Mix", input.Mix )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Add audio voice effects to the an in-progress voice call.
        /// </summary>
        /// <param name="Models.CreateCallsVoiceeffectInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateCallsVoiceeffect(Models.CreateCallsVoiceeffectInput input)
        {
            Task<string> t = CreateCallsVoiceeffectAsync(input);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Add audio voice effects to the an in-progress voice call.
        /// </summary>
        /// <param name="Models.CreateCallsVoiceeffectInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateCallsVoiceeffectAsync(Models.CreateCallsVoiceeffectInput input)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/calls/voiceeffect.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "CallSid", input.CallSid ),
                new KeyValuePair<string, object>( "AudioDirection", (input.AudioDirection.HasValue) ? Models.AudioDirectionEnumHelper.ToValue(input.AudioDirection.Value) : null ),
                new KeyValuePair<string, object>( "PitchSemiTones", input.PitchSemiTones ),
                new KeyValuePair<string, object>( "PitchOctaves", input.PitchOctaves ),
                new KeyValuePair<string, object>( "Pitch", input.Pitch ),
                new KeyValuePair<string, object>( "Rate", input.Rate ),
                new KeyValuePair<string, object>( "Tempo", input.Tempo )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Group Call
        /// </summary>
        /// <param name="Models.CreateCallsGroupcallInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateCallsGroupcall(Models.CreateCallsGroupcallInput input)
        {
            Task<string> t = CreateCallsGroupcallAsync(input);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Group Call
        /// </summary>
        /// <param name="Models.CreateCallsGroupcallInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateCallsGroupcallAsync(Models.CreateCallsGroupcallInput input)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/calls/groupcall.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "From", input.From ),
                new KeyValuePair<string, object>( "To", input.To ),
                new KeyValuePair<string, object>( "Url", input.Url ),
                new KeyValuePair<string, object>( "GroupConfirmKey", input.GroupConfirmKey ),
                new KeyValuePair<string, object>( "GroupConfirmFile", Models.GroupConfirmFileEnumHelper.ToValue(input.GroupConfirmFile) ),
                new KeyValuePair<string, object>( "Method", input.Method ),
                new KeyValuePair<string, object>( "StatusCallBackUrl", input.StatusCallBackUrl ),
                new KeyValuePair<string, object>( "StatusCallBackMethod", input.StatusCallBackMethod ),
                new KeyValuePair<string, object>( "FallBackUrl", input.FallBackUrl ),
                new KeyValuePair<string, object>( "FallBackMethod", input.FallBackMethod ),
                new KeyValuePair<string, object>( "HeartBeatUrl", input.HeartBeatUrl ),
                new KeyValuePair<string, object>( "HeartBeatMethod", input.HeartBeatMethod ),
                new KeyValuePair<string, object>( "Timeout", input.Timeout ),
                new KeyValuePair<string, object>( "PlayDtmf", input.PlayDtmf ),
                new KeyValuePair<string, object>( "HideCallerId", input.HideCallerId ),
                new KeyValuePair<string, object>( "Record", input.Record ),
                new KeyValuePair<string, object>( "RecordCallBackUrl", input.RecordCallBackUrl ),
                new KeyValuePair<string, object>( "RecordCallBackMethod", input.RecordCallBackMethod ),
                new KeyValuePair<string, object>( "Transcribe", input.Transcribe ),
                new KeyValuePair<string, object>( "TranscribeCallBackUrl", input.TranscribeCallBackUrl )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// You can experiment with initiating a call through Ytel and view the request response generated when doing so and get the response in json
        /// </summary>
        /// <param name="Models.CreateCallsMakecallInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateCallsMakecall(Models.CreateCallsMakecallInput input)
        {
            Task<string> t = CreateCallsMakecallAsync(input);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// You can experiment with initiating a call through Ytel and view the request response generated when doing so and get the response in json
        /// </summary>
        /// <param name="Models.CreateCallsMakecallInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateCallsMakecallAsync(Models.CreateCallsMakecallInput input)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/calls/makecall.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "From", input.From ),
                new KeyValuePair<string, object>( "To", input.To ),
                new KeyValuePair<string, object>( "Url", input.Url ),
                new KeyValuePair<string, object>( "Method", input.Method ),
                new KeyValuePair<string, object>( "StatusCallBackUrl", input.StatusCallBackUrl ),
                new KeyValuePair<string, object>( "StatusCallBackMethod", input.StatusCallBackMethod ),
                new KeyValuePair<string, object>( "FallBackUrl", input.FallBackUrl ),
                new KeyValuePair<string, object>( "FallBackMethod", input.FallBackMethod ),
                new KeyValuePair<string, object>( "HeartBeatUrl", input.HeartBeatUrl ),
                new KeyValuePair<string, object>( "HeartBeatMethod", input.HeartBeatMethod ),
                new KeyValuePair<string, object>( "Timeout", input.Timeout ),
                new KeyValuePair<string, object>( "PlayDtmf", input.PlayDtmf ),
                new KeyValuePair<string, object>( "HideCallerId", input.HideCallerId ),
                new KeyValuePair<string, object>( "Record", input.Record ),
                new KeyValuePair<string, object>( "RecordCallBackUrl", input.RecordCallBackUrl ),
                new KeyValuePair<string, object>( "RecordCallBackMethod", input.RecordCallBackMethod ),
                new KeyValuePair<string, object>( "Transcribe", input.Transcribe ),
                new KeyValuePair<string, object>( "TranscribeCallBackUrl", input.TranscribeCallBackUrl ),
                new KeyValuePair<string, object>( "IfMachine", (input.IfMachine.HasValue) ? Models.IfMachineEnumHelper.ToValue(input.IfMachine.Value) : null ),
                new KeyValuePair<string, object>( "IfMachineUrl", input.IfMachineUrl ),
                new KeyValuePair<string, object>( "IfMachineMethod", input.IfMachineMethod ),
                new KeyValuePair<string, object>( "Feedback", input.Feedback ),
                new KeyValuePair<string, object>( "SurveyId", input.SurveyId )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 