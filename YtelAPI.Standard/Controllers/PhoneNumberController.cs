/*
 * YtelAPI.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using YtelAPI.Standard;
using YtelAPI.Standard.Utilities;
using YtelAPI.Standard.Http.Request;
using YtelAPI.Standard.Http.Response;
using YtelAPI.Standard.Http.Client;
using YtelAPI.Standard.Exceptions;

namespace YtelAPI.Standard.Controllers
{
    public partial class PhoneNumberController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static PhoneNumberController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static PhoneNumberController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new PhoneNumberController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Get DID Score Number
        /// </summary>
        /// <param name="phonenumber">Required parameter: Specifies the multiple phone numbers for check updated spamscore .</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateIncomingphoneGetdidscore(string phonenumber)
        {
            Task<string> t = CreateIncomingphoneGetdidscoreAsync(phonenumber);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get DID Score Number
        /// </summary>
        /// <param name="phonenumber">Required parameter: Specifies the multiple phone numbers for check updated spamscore .</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateIncomingphoneGetdidscoreAsync(string phonenumber)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/incomingphone/getdidscore.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "Phonenumber", phonenumber )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Purchase a selected number of DID's from specific area codes to be used with your Ytel account.
        /// </summary>
        /// <param name="Models.CreateIncomingphoneBulkbuyInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateIncomingphoneBulkbuy(Models.CreateIncomingphoneBulkbuyInput input)
        {
            Task<string> t = CreateIncomingphoneBulkbuyAsync(input);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Purchase a selected number of DID's from specific area codes to be used with your Ytel account.
        /// </summary>
        /// <param name="Models.CreateIncomingphoneBulkbuyInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateIncomingphoneBulkbuyAsync(Models.CreateIncomingphoneBulkbuyInput input)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/incomingphone/bulkbuy.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "NumberType", Models.Numbertype16EnumHelper.ToValue(input.NumberType) ),
                new KeyValuePair<string, object>( "AreaCode", input.AreaCode ),
                new KeyValuePair<string, object>( "Quantity", input.Quantity ),
                new KeyValuePair<string, object>( "Leftover", input.Leftover )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Retrieve a list of purchased phones numbers associated with your Ytel account.
        /// </summary>
        /// <param name="Models.CreateIncomingphoneListnumberInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateIncomingphoneListnumber(Models.CreateIncomingphoneListnumberInput input)
        {
            Task<string> t = CreateIncomingphoneListnumberAsync(input);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieve a list of purchased phones numbers associated with your Ytel account.
        /// </summary>
        /// <param name="Models.CreateIncomingphoneListnumberInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateIncomingphoneListnumberAsync(Models.CreateIncomingphoneListnumberInput input)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/incomingphone/listnumber.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "Page", input.Page ),
                new KeyValuePair<string, object>( "PageSize", input.PageSize ),
                new KeyValuePair<string, object>( "NumberType", (input.NumberType.HasValue) ? Models.Numbertype16EnumHelper.ToValue(input.NumberType.Value) : null ),
                new KeyValuePair<string, object>( "FriendlyName", input.FriendlyName )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Purchase a phone number to be used with your Ytel account
        /// </summary>
        /// <param name="phoneNumber">Required parameter: A valid 10-digit Ytel number (E.164 format).</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateIncomingphoneBuynumber(string phoneNumber)
        {
            Task<string> t = CreateIncomingphoneBuynumberAsync(phoneNumber);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Purchase a phone number to be used with your Ytel account
        /// </summary>
        /// <param name="phoneNumber">Required parameter: A valid 10-digit Ytel number (E.164 format).</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateIncomingphoneBuynumberAsync(string phoneNumber)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/incomingphone/buynumber.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "PhoneNumber", phoneNumber )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Remove a purchased Ytel number from your account.
        /// </summary>
        /// <param name="Models.CreateIncomingphoneReleasenumberByResponseTypePostInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateIncomingphoneReleasenumberByResponseTypePost(Models.CreateIncomingphoneReleasenumberByResponseTypePostInput input)
        {
            Task<string> t = CreateIncomingphoneReleasenumberByResponseTypePostAsync(input);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Remove a purchased Ytel number from your account.
        /// </summary>
        /// <param name="Models.CreateIncomingphoneReleasenumberByResponseTypePostInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateIncomingphoneReleasenumberByResponseTypePostAsync(Models.CreateIncomingphoneReleasenumberByResponseTypePostInput input)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/incomingphone/releasenumber.{ResponseType}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "ResponseType", input.ResponseType }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "PhoneNumber", input.PhoneNumber )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Retrieve the details for a phone number by its number.
        /// </summary>
        /// <param name="phoneNumber">Required parameter: A valid Ytel 10-digit phone number (E.164 format).</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateIncomingphoneViewnumber(string phoneNumber)
        {
            Task<string> t = CreateIncomingphoneViewnumberAsync(phoneNumber);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieve the details for a phone number by its number.
        /// </summary>
        /// <param name="phoneNumber">Required parameter: A valid Ytel 10-digit phone number (E.164 format).</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateIncomingphoneViewnumberAsync(string phoneNumber)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/incomingphone/viewnumber.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "PhoneNumber", phoneNumber )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Transfer phone number that has been purchased for from one account to another account.
        /// </summary>
        /// <param name="Models.CreateIncomingphoneTransferphonenumbersInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateIncomingphoneTransferphonenumbers(Models.CreateIncomingphoneTransferphonenumbersInput input)
        {
            Task<string> t = CreateIncomingphoneTransferphonenumbersAsync(input);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Transfer phone number that has been purchased for from one account to another account.
        /// </summary>
        /// <param name="Models.CreateIncomingphoneTransferphonenumbersInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateIncomingphoneTransferphonenumbersAsync(Models.CreateIncomingphoneTransferphonenumbersInput input)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/incomingphone/transferphonenumbers.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "phonenumber", input.Phonenumber ),
                new KeyValuePair<string, object>( "fromaccountsid", input.Fromaccountsid ),
                new KeyValuePair<string, object>( "toaccountsid", input.Toaccountsid )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Remove a purchased Ytel number from your account.
        /// </summary>
        /// <param name="phoneNumber">Required parameter: A valid Ytel comma separated numbers (E.164 format).</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateIncomingphoneMassreleasenumber(string phoneNumber)
        {
            Task<string> t = CreateIncomingphoneMassreleasenumberAsync(phoneNumber);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Remove a purchased Ytel number from your account.
        /// </summary>
        /// <param name="phoneNumber">Required parameter: A valid Ytel comma separated numbers (E.164 format).</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateIncomingphoneMassreleasenumberAsync(string phoneNumber)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/incomingphone/massreleasenumber.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "PhoneNumber", phoneNumber )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Update properties for a Ytel numbers that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
        /// </summary>
        /// <param name="Models.CreateIncomingphoneMassupdatenumberInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateIncomingphoneMassupdatenumber(Models.CreateIncomingphoneMassupdatenumberInput input)
        {
            Task<string> t = CreateIncomingphoneMassupdatenumberAsync(input);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Update properties for a Ytel numbers that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
        /// </summary>
        /// <param name="Models.CreateIncomingphoneMassupdatenumberInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateIncomingphoneMassupdatenumberAsync(Models.CreateIncomingphoneMassupdatenumberInput input)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/incomingphone/massupdatenumber.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "PhoneNumber", input.PhoneNumber ),
                new KeyValuePair<string, object>( "VoiceUrl", input.VoiceUrl ),
                new KeyValuePair<string, object>( "FriendlyName", input.FriendlyName ),
                new KeyValuePair<string, object>( "VoiceMethod", input.VoiceMethod ),
                new KeyValuePair<string, object>( "VoiceFallbackUrl", input.VoiceFallbackUrl ),
                new KeyValuePair<string, object>( "VoiceFallbackMethod", input.VoiceFallbackMethod ),
                new KeyValuePair<string, object>( "HangupCallback", input.HangupCallback ),
                new KeyValuePair<string, object>( "HangupCallbackMethod", input.HangupCallbackMethod ),
                new KeyValuePair<string, object>( "HeartbeatUrl", input.HeartbeatUrl ),
                new KeyValuePair<string, object>( "HeartbeatMethod", input.HeartbeatMethod ),
                new KeyValuePair<string, object>( "SmsUrl", input.SmsUrl ),
                new KeyValuePair<string, object>( "SmsMethod", input.SmsMethod ),
                new KeyValuePair<string, object>( "SmsFallbackUrl", input.SmsFallbackUrl ),
                new KeyValuePair<string, object>( "SmsFallbackMethod", input.SmsFallbackMethod )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Update properties for a Ytel number that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
        /// </summary>
        /// <param name="Models.CreateIncomingphoneUpdatenumberInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateIncomingphoneUpdatenumber(Models.CreateIncomingphoneUpdatenumberInput input)
        {
            Task<string> t = CreateIncomingphoneUpdatenumberAsync(input);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Update properties for a Ytel number that has been purchased for your account. Refer to the parameters list for the list of properties that can be updated.
        /// </summary>
        /// <param name="Models.CreateIncomingphoneUpdatenumberInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateIncomingphoneUpdatenumberAsync(Models.CreateIncomingphoneUpdatenumberInput input)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/incomingphone/updatenumber.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "PhoneNumber", input.PhoneNumber ),
                new KeyValuePair<string, object>( "VoiceUrl", input.VoiceUrl ),
                new KeyValuePair<string, object>( "FriendlyName", input.FriendlyName ),
                new KeyValuePair<string, object>( "VoiceMethod", input.VoiceMethod ),
                new KeyValuePair<string, object>( "VoiceFallbackUrl", input.VoiceFallbackUrl ),
                new KeyValuePair<string, object>( "VoiceFallbackMethod", input.VoiceFallbackMethod ),
                new KeyValuePair<string, object>( "HangupCallback", input.HangupCallback ),
                new KeyValuePair<string, object>( "HangupCallbackMethod", input.HangupCallbackMethod ),
                new KeyValuePair<string, object>( "HeartbeatUrl", input.HeartbeatUrl ),
                new KeyValuePair<string, object>( "HeartbeatMethod", input.HeartbeatMethod ),
                new KeyValuePair<string, object>( "SmsUrl", input.SmsUrl ),
                new KeyValuePair<string, object>( "SmsMethod", input.SmsMethod ),
                new KeyValuePair<string, object>( "SmsFallbackUrl", input.SmsFallbackUrl ),
                new KeyValuePair<string, object>( "SmsFallbackMethod", input.SmsFallbackMethod )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Retrieve a list of available phone numbers that can be purchased and used for your Ytel account.
        /// </summary>
        /// <param name="Models.CreateIncomingphoneAvailablenumberInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public string CreateIncomingphoneAvailablenumber(Models.CreateIncomingphoneAvailablenumberInput input)
        {
            Task<string> t = CreateIncomingphoneAvailablenumberAsync(input);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieve a list of available phone numbers that can be purchased and used for your Ytel account.
        /// </summary>
        /// <param name="Models.CreateIncomingphoneAvailablenumberInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> CreateIncomingphoneAvailablenumberAsync(Models.CreateIncomingphoneAvailablenumberInput input)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/incomingphone/availablenumber.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "numbertype", Models.Numbertype16EnumHelper.ToValue(input.Numbertype) ),
                new KeyValuePair<string, object>( "areacode", input.Areacode ),
                new KeyValuePair<string, object>( "pagesize", input.Pagesize )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 