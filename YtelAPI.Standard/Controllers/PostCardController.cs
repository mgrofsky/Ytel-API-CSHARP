/*
 * YtelAPI.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using YtelAPI.Standard;
using YtelAPI.Standard.Utilities;
using YtelAPI.Standard.Http.Request;
using YtelAPI.Standard.Http.Response;
using YtelAPI.Standard.Http.Client;
using YtelAPI.Standard.Exceptions;

namespace YtelAPI.Standard.Controllers
{
    public partial class PostCardController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static PostCardController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static PostCardController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new PostCardController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Remove a postcard object.
        /// </summary>
        /// <param name="postcardid">Required parameter: The unique identifier of a postcard object.</param>
        /// <return>Returns the string response from the API call</return>
        public string PostcardDeletepostcard(string postcardid)
        {
            Task<string> t = PostcardDeletepostcardAsync(postcardid);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Remove a postcard object.
        /// </summary>
        /// <param name="postcardid">Required parameter: The unique identifier of a postcard object.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> PostcardDeletepostcardAsync(string postcardid)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Postcard/deletepostcard.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "postcardid", postcardid )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Retrieve a postcard object by its PostcardId.
        /// </summary>
        /// <param name="postcardid">Required parameter: The unique identifier for a postcard object.</param>
        /// <return>Returns the string response from the API call</return>
        public string PostcardViewpostcard(string postcardid)
        {
            Task<string> t = PostcardViewpostcardAsync(postcardid);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieve a postcard object by its PostcardId.
        /// </summary>
        /// <param name="postcardid">Required parameter: The unique identifier for a postcard object.</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> PostcardViewpostcardAsync(string postcardid)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Postcard/viewpostcard.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "postcardid", postcardid )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Retrieve a list of postcard objects. The postcards objects are sorted by creation date, with the most recently created postcards appearing first.
        /// </summary>
        /// <param name="Models.PostcardListpostcardInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public string PostcardListpostcard(Models.PostcardListpostcardInput input)
        {
            Task<string> t = PostcardListpostcardAsync(input);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieve a list of postcard objects. The postcards objects are sorted by creation date, with the most recently created postcards appearing first.
        /// </summary>
        /// <param name="Models.PostcardListpostcardInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> PostcardListpostcardAsync(Models.PostcardListpostcardInput input)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Postcard/listpostcard.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "page", input.Page ),
                new KeyValuePair<string, object>( "pagesize", input.Pagesize ),
                new KeyValuePair<string, object>( "postcardid", input.Postcardid ),
                new KeyValuePair<string, object>( "dateCreated", input.DateCreated )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Create, print, and mail a postcard to an address. The postcard front must be supplied as a PDF, image, or an HTML string. The back can be a PDF, image, HTML string, or it can be automatically generated by supplying a custom message.
        /// </summary>
        /// <param name="Models.PostcardCreatepostcardInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public string PostcardCreatepostcard(Models.PostcardCreatepostcardInput input)
        {
            Task<string> t = PostcardCreatepostcardAsync(input);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Create, print, and mail a postcard to an address. The postcard front must be supplied as a PDF, image, or an HTML string. The back can be a PDF, image, HTML string, or it can be automatically generated by supplying a custom message.
        /// </summary>
        /// <param name="Models.PostcardCreatepostcardInput">Object containing request parameters</param>
        /// <return>Returns the string response from the API call</return>
        public async Task<string> PostcardCreatepostcardAsync(Models.PostcardCreatepostcardInput input)
        {
            //the base uri for api requests
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Postcard/createpostcard.json");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "to", input.To ),
                new KeyValuePair<string, object>( "from", input.From ),
                new KeyValuePair<string, object>( "attachbyid", input.Attachbyid ),
                new KeyValuePair<string, object>( "front", input.Front ),
                new KeyValuePair<string, object>( "back", input.Back ),
                new KeyValuePair<string, object>( "message", input.Message ),
                new KeyValuePair<string, object>( "setting", input.Setting ),
                new KeyValuePair<string, object>( "description", input.Description ),
                new KeyValuePair<string, object>( "htmldata", input.Htmldata )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields, Configuration.BasicAuthUserName, Configuration.BasicAuthPassword);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return _response.Body;
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 